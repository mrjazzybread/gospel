"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[983],{5680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>m});var n=a(6540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(a),d=r,m=u["".concat(s,".").concat(d)]||u[d]||g[d]||i;return a?n.createElement(m,o(o({ref:t},c),{},{components:a})):n.createElement(m,o({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1216:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(8168),r=(a(6540),a(5680));const i={sidebar_position:10},o="Appendix: Gospel in OCaml Attributes",l={unversionedId:"language/attributes",id:"language/attributes",title:"Appendix: Gospel in OCaml Attributes",description:"Gospel processes a file in various stages:",source:"@site/docs/language/attributes.md",sourceDirName:"language",slug:"/language/attributes",permalink:"/gospel/language/attributes",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Semantics",permalink:"/gospel/language/semantics"},next:{title:"Standard Library",permalink:"/gospel/stdlib"}},s={},p=[{value:"Floating Attributes",id:"floating-attributes",level:2},{value:"Attached Attributes",id:"attached-attributes",level:2},{value:"Specification of Ghost and Logical Declarations",id:"specification-of-ghost-and-logical-declarations",level:2},{value:"Gospel Preprocessor",id:"gospel-preprocessor",level:2}],c={toc:p},u="wrapper";function g(e){let{components:t,...a}=e;return(0,r.yg)(u,(0,n.A)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"appendix-gospel-in-ocaml-attributes"},"Appendix: Gospel in OCaml Attributes"),(0,r.yg)("p",null,"Gospel processes a file in various stages:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Gospel preprocessor turns the special comments ",(0,r.yg)("inlineCode",{parentName:"li"},"(*@ ... *)")," into ",(0,r.yg)("a",{parentName:"li",href:"https://caml.inria.fr/pub/docs/manual-ocaml/attributes.html"},"OCaml\nattributes"),","),(0,r.yg)("li",{parentName:"ul"},"it then relies on the standard OCaml parser to generate an AST,"),(0,r.yg)("li",{parentName:"ul"},"it finally parses the Gospel specifications inside attributes.")),(0,r.yg)("p",null,"Gospel uses OCaml attributes with the identifier ",(0,r.yg)("inlineCode",{parentName:"p"},"gospel")," to bear the Gospel\nspecifications in their payload as strings: ",(0,r.yg)("inlineCode",{parentName:"p"},'[@@gospel "<spec>"]')," and\n",(0,r.yg)("inlineCode",{parentName:"p"},'[@@@gospel "<spec>"]'),"."),(0,r.yg)("h2",{id:"floating-attributes"},"Floating Attributes"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/gospel/language/logical"},"Ghost and logical declarations")," must lie in floating attributes,\ninside module signatures:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ocaml"},'[@@@gospel "val f : int -> int"]\n[@@@gospel "predicate is_zero (x: integer) = x = 0"]\n')),(0,r.yg)("h2",{id:"attached-attributes"},"Attached Attributes"),(0,r.yg)("p",null,"Specification bits which are semantically attached to OCaml declarations (e.g.\n",(0,r.yg)("a",{parentName:"p",href:"/gospel/language/function-contracts"},"function contracts")," or ",(0,r.yg)("a",{parentName:"p",href:"/gospel/language/type-specifications"},"type\nspecifications"),") should be written in an attached\nattribute, following OCaml's attachment rules:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ocaml"},'val f: int -> int\n[@@gospel "y = f x ensures x > 0"]\n')),(0,r.yg)("h2",{id:"specification-of-ghost-and-logical-declarations"},"Specification of Ghost and Logical Declarations"),(0,r.yg)("p",null,"When ghost and logical declarations need to be specified with a contract, the\ncontract should reside in an attribute attached to the string containing the\ndeclaration:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ocaml"},'[@@@gospel "val f : int -> int"\n  [@@gospel "y = f x ensures x > 0"]]\n')),(0,r.yg)("h2",{id:"gospel-preprocessor"},"Gospel Preprocessor"),(0,r.yg)("p",null,"The preprocessor is available via the ",(0,r.yg)("inlineCode",{parentName:"p"},"gospel pps")," command. It is also applied\nautomatically on type-checking, so you should not have to worry about manually\napplying it."))}g.isMDXComponent=!0}}]);