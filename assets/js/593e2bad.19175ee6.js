"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[718],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>y});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=p(t),m=a,y=f["".concat(l,".").concat(m)]||f[m]||u[m]||i;return t?r.createElement(y,o(o({ref:n},c),{},{components:t})):r.createElement(y,o({ref:n},c))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[f]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7086:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=t(8168),a=(t(6540),t(5680));const i={sidebar_position:3},o="Expressions",s={unversionedId:"language/expressions",id:"language/expressions",title:"Expressions",description:"The syntax for Gospel expressions is largely OCaml's syntax.",source:"@site/docs/language/expressions.md",sourceDirName:"language",slug:"/language/expressions",permalink:"/gospel/language/expressions",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Lexical Conventions",permalink:"/gospel/language/lexical-conventions"},next:{title:"Type Specifications",permalink:"/gospel/language/type-specifications"}},l={},p=[],c={toc:p},f="wrapper";function u(e){let{components:n,...t}=e;return(0,a.yg)(f,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"expressions"},"Expressions"),(0,a.yg)("p",null,"The syntax for Gospel expressions is largely OCaml's syntax.\nThe main differences are:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Gospel can represent the following formulae:"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-ocaml",metastring:"invalidSyntax",invalidSyntax:!0},"forall x,y. rest  (* universal quantification of [x] and [y] in [rest] *)\nexists x,y. rest  (* existential quantification of [x] and [y] in [rest] *)\nform1 /\\ form2    (* conjunction *)\nform1 \\/ form2    (* disjunction *)\nform1 <-> form2   (* equivalence *)\nform1 -> form2    (* implication *)\n"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Gospel can represent the following terms:"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-ocaml",metastring:"invalidSyntax",invalidSyntax:!0},"old expr          (* value of [expr] before running the function\n                     (in a post-condition of the function) *)\ns[i]              (* [i]-th element of the sequence [s] *)\ns[i..j]           (* slice of sequence of [s] from [i] to [j] indices *)\ns[..j]            (* slice of sequence of [s] from beginning to index [j] *)\ns[i..]            (* slice of sequence of [s] from index [i] to end *)\nf[x->v]           (* function equal to [v] on [x] and to [f y] on [y] *)\n")))),(0,a.yg)("p",null,"Note that ",(0,a.yg)("inlineCode",{parentName:"p"},"e1[e2]")," is part of the OCaml syntax (application of ",(0,a.yg)("inlineCode",{parentName:"p"},"e1")," to a\nsingle-element list ",(0,a.yg)("inlineCode",{parentName:"p"},"[e2]"),") but has a different meaning in Gospel, namely,\naccess to a sequence element."),(0,a.yg)("p",null,"There are two operators for logical conjunction, ",(0,a.yg)("inlineCode",{parentName:"p"},"&&")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"/\\"),", and two\noperators for logical disjunction: ",(0,a.yg)("inlineCode",{parentName:"p"},"||")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"\\/"),". A difference between the two,\nif any, is tool-specific. For instance, a deductive verification tool may\ninterpret ",(0,a.yg)("inlineCode",{parentName:"p"},"A && B")," as ",(0,a.yg)("inlineCode",{parentName:"p"},"A /\\ (A -> B)")," and a runtime assertion checking tool may\ninterpret ",(0,a.yg)("inlineCode",{parentName:"p"},"A && B")," as a lazy operator (as in OCaml) and ",(0,a.yg)("inlineCode",{parentName:"p"},"A /\\ B")," as a strict\noperator."),(0,a.yg)("p",null,"Another noticeable difference w.r.t. the OCaml syntax is that infix operators\ncan be chained in Gospel. One can write ",(0,a.yg)("inlineCode",{parentName:"p"},"0 <= n < 100"),", for instance, and it is\ninterpreted as ",(0,a.yg)("inlineCode",{parentName:"p"},"0 <= n /\\ n < 100"),"."))}u.isMDXComponent=!0}}]);