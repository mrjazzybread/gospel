"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[581],{5610:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Welcome!","href":"/gospel/","docId":"welcome"},{"type":"category","label":"Getting Started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Installing Gospel","href":"/gospel/getting-started/installation","docId":"getting-started/installation"},{"type":"link","label":"Your First Specification","href":"/gospel/getting-started/first-spec","docId":"getting-started/first-spec"},{"type":"link","label":"Now What?","href":"/gospel/getting-started/tools","docId":"getting-started/tools"},{"type":"link","label":"Going Further","href":"/gospel/getting-started/going-further","docId":"getting-started/going-further"}]},{"type":"category","label":"Walk-throughs","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/gospel/walkthroughs/introduction","docId":"walkthroughs/introduction"},{"type":"link","label":"Fibonacci Numbers","href":"/gospel/walkthroughs/fibonacci","docId":"walkthroughs/fibonacci"},{"type":"link","label":"Mutable Queues","href":"/gospel/walkthroughs/mutable-queue","docId":"walkthroughs/mutable-queue"},{"type":"link","label":"Union-find","href":"/gospel/walkthroughs/union-find","docId":"walkthroughs/union-find"}]},{"type":"category","label":"Language reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Gospel Special Comment Syntax","href":"/gospel/language/syntax","docId":"language/syntax"},{"type":"link","label":"Lexical Conventions","href":"/gospel/language/lexical-conventions","docId":"language/lexical-conventions"},{"type":"link","label":"Expressions","href":"/gospel/language/expressions","docId":"language/expressions"},{"type":"link","label":"Type Specifications","href":"/gospel/language/type-specifications","docId":"language/type-specifications"},{"type":"link","label":"Constant Specifications","href":"/gospel/language/constant-specifications","docId":"language/constant-specifications"},{"type":"link","label":"Function Contracts","href":"/gospel/language/function-contracts","docId":"language/function-contracts"},{"type":"link","label":"Logical Declarations","href":"/gospel/language/logical","docId":"language/logical"},{"type":"link","label":"Symbols in Scope","href":"/gospel/language/scope","docId":"language/scope"},{"type":"link","label":"Semantics","href":"/gospel/language/semantics","docId":"language/semantics"},{"type":"link","label":"Appendix: Gospel in OCaml Attributes","href":"/gospel/language/attributes","docId":"language/attributes"}]},{"type":"link","label":"Standard Library","href":"/gospel/stdlib","docId":"stdlib"},{"type":"link","label":"FAQ","href":"/gospel/faq","docId":"faq"}]},"docs":{"faq":{"id":"faq","title":"FAQ","description":"Your question is not answered here? Feel free to [open a","sidebar":"tutorialSidebar"},"getting-started/first-spec":{"id":"getting-started/first-spec","title":"Your First Specification","description":"Let us get started with a simple specification example, and specify a generic","sidebar":"tutorialSidebar"},"getting-started/going-further":{"id":"getting-started/going-further","title":"Going Further","description":"This tutorial only covered very few features of Gospel. Please feel free to","sidebar":"tutorialSidebar"},"getting-started/installation":{"id":"getting-started/installation","title":"Installing Gospel","description":"Please make sure that you already have a decently recent version of OCaml and","sidebar":"tutorialSidebar"},"getting-started/tools":{"id":"getting-started/tools","title":"Now What?","description":"You\'ve written your first specification. Now what can you do with it?","sidebar":"tutorialSidebar"},"language/attributes":{"id":"language/attributes","title":"Appendix: Gospel in OCaml Attributes","description":"Gospel processes a file in various stages:","sidebar":"tutorialSidebar"},"language/constant-specifications":{"id":"language/constant-specifications","title":"Constant Specifications","description":"OCaml constant specifications are simple. They consist of a list of clauses","sidebar":"tutorialSidebar"},"language/expressions":{"id":"language/expressions","title":"Expressions","description":"The syntax for Gospel expressions is largely OCaml\'s syntax.","sidebar":"tutorialSidebar"},"language/function-contracts":{"id":"language/function-contracts","title":"Function Contracts","description":"A function contract is a formal Gospel specification attached to the declaration","sidebar":"tutorialSidebar"},"language/lexical-conventions":{"id":"language/lexical-conventions","title":"Lexical Conventions","description":"Gospel borrows most of [OCaml\'s lexical","sidebar":"tutorialSidebar"},"language/logical":{"id":"language/logical","title":"Logical Declarations","description":"Functions, Predicates and Axioms","sidebar":"tutorialSidebar"},"language/scope":{"id":"language/scope","title":"Symbols in Scope","description":"Gospel checks that only symbols that are meaningful are in scope.","sidebar":"tutorialSidebar"},"language/semantics":{"id":"language/semantics","title":"Semantics","description":"The Gospel paper describes how the semantics of the Gospel language is","sidebar":"tutorialSidebar"},"language/syntax":{"id":"language/syntax","title":"Gospel Special Comment Syntax","description":"Gospel specifications are written in interface files (.mli). They are written","sidebar":"tutorialSidebar"},"language/type-specifications":{"id":"language/type-specifications","title":"Type Specifications","description":"OCaml types can be annotated with Gospel specifications in order to model their","sidebar":"tutorialSidebar"},"stdlib":{"id":"stdlib","title":"Standard Library","description":"Gospel provides a set of useful types, functions and predicates that you can use","sidebar":"tutorialSidebar"},"walkthroughs/fibonacci":{"id":"walkthroughs/fibonacci","title":"Fibonacci Numbers","description":"In this example, we\'ll look into specifying an efficient implementation of a","sidebar":"tutorialSidebar"},"walkthroughs/introduction":{"id":"walkthroughs/introduction","title":"Introduction","description":"This section features some real-world specifications using Gospel and","sidebar":"tutorialSidebar"},"walkthroughs/mutable-queue":{"id":"walkthroughs/mutable-queue","title":"Mutable Queues","description":"This example aims to provide a formal specification for a mutable queue data","sidebar":"tutorialSidebar"},"walkthroughs/union-find":{"id":"walkthroughs/union-find","title":"Union-find","description":"In this example, we will highlight an advanced use case of ghost declarations in","sidebar":"tutorialSidebar"},"welcome":{"id":"welcome","title":"Welcome!","description":"Welcome to the Gospel documentation. We provide several resources","sidebar":"tutorialSidebar"}}}')}}]);