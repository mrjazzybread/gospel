"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[967],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>u});var a=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},y="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),y=p(n),d=i,u=y["".concat(s,".").concat(d)]||y[d]||m[d]||r;return n?a.createElement(u,o(o({ref:t},c),{},{components:n})):a.createElement(u,o({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[y]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5368:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(8168),i=(n(6540),n(5680));const r={sidebar_position:4},o="Type Specifications",l={unversionedId:"language/type-specifications",id:"language/type-specifications",title:"Type Specifications",description:"OCaml types can be annotated with Gospel specifications in order to model their",source:"@site/docs/language/type-specifications.md",sourceDirName:"language",slug:"/language/type-specifications",permalink:"/gospel/language/type-specifications",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Expressions",permalink:"/gospel/language/expressions"},next:{title:"Constant Specifications",permalink:"/gospel/language/constant-specifications"}},s={},p=[{value:"Models",id:"models",level:2},{value:"Mutable Types",id:"mutable-types",level:2},{value:"Invariants",id:"invariants",level:2}],c={toc:p},y="wrapper";function m(e){let{components:t,...n}=e;return(0,i.yg)(y,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"type-specifications"},"Type Specifications"),(0,i.yg)("p",null,"OCaml types can be annotated with Gospel specifications in order to model their\ncontents and express invariants. Consider the following example of a container\ndata-structure."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ocaml"},"type 'a t\n(*@ model capacity: int\n    mutable model contents: 'a Set.t\n    with t invariant Set.cardinal t.contents <= t.capacity *)\n")),(0,i.yg)("p",null,"The specification of this type contains three elements:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"The first two lines are models. They represent the type ",(0,i.yg)("inlineCode",{parentName:"li"},"t")," in the logical\ndomain. ",(0,i.yg)("inlineCode",{parentName:"li"},"capacity")," is an immutable model of type ",(0,i.yg)("inlineCode",{parentName:"li"},"int")," representing the\nmaximum length of the data-structure, and ",(0,i.yg)("inlineCode",{parentName:"li"},"contents")," is a mutable set\nrepresenting its contents. Note that ",(0,i.yg)("inlineCode",{parentName:"li"},"Set.t")," references a logical set\nprovided by Gospel's ",(0,i.yg)("a",{parentName:"li",href:"../stdlib"},"standard library"),". Models don't\ngive any information on the actual implementation of ",(0,i.yg)("inlineCode",{parentName:"li"},"t"),"."),(0,i.yg)("li",{parentName:"ul"},"The last line is a clause denoting a type invariant. At all times, values of\ntype ",(0,i.yg)("inlineCode",{parentName:"li"},"t")," should contain less elements that their maximum capacity.")),(0,i.yg)("p",null,"Type specifications can contain models, invariants, and mutability information."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ebnf",metastring:'title="Type specification syntax"',title:'"Type',specification:!0,'syntax"':!0},'type_specification = "ephemeral"? model-clause* invariant-block?\nmodel-clause = "mutable"? "model" identifier ":" type_expression\ninvariant-block = "with" identifier invariant-clause+\ninvariant-clause = "invariant" expr\n')),(0,i.yg)("h2",{id:"models"},"Models"),(0,i.yg)("p",null,"Type models are logical projections of OCaml types. They help specify the type\ninvariants and contents at several locations of the program, without actually\nexposing them and leaking implementation details."),(0,i.yg)("p",null,"The keyword ",(0,i.yg)("inlineCode",{parentName:"p"},"model")," is used to introduce a new model. It may be preceded by the\nkeyword ",(0,i.yg)("inlineCode",{parentName:"p"},"mutable")," to denote that the model may be mutated during the execution\nof the program, e.g., by a function call. It's followed by a type-annotated\nname for that model in a fashion similar to OCaml's record fields."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ocaml",metastring:"{2,3}","{2,3}":!0},"type 'a t\n(*@ model capacity: int\n    mutable model contents: 'a Set.t\n    with t invariant Set.cardinal t.contents <= t.capacity *)\n")),(0,i.yg)("h2",{id:"mutable-types"},"Mutable Types"),(0,i.yg)("p",null,"Gospel lets you specify when a type may contain some mutable state by using the\nkeyword ",(0,i.yg)("inlineCode",{parentName:"p"},"ephemeral")," in its annotation:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ocaml",metastring:"{2}","{2}":!0},"type t\n(*@ ephemeral\n    model capacity: int *)\n")),(0,i.yg)("p",null,"Of course, a type that has a mutable model is considered mutable, so the\n",(0,i.yg)("inlineCode",{parentName:"p"},"ephemeral")," may be omitted whenever at least one declared model is mutable."),(0,i.yg)("admonition",{type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"Only use ",(0,i.yg)("inlineCode",{parentName:"p"},"ephemeral")," when there is mutability that cannot be guessed otherwise.")),(0,i.yg)("h2",{id:"invariants"},"Invariants"),(0,i.yg)("p",null,"Type annotations may also contain invariants that hold at every function's entry\nand exit point that manipulates their values. Formulae expressing these\nproperties may be added after the ",(0,i.yg)("inlineCode",{parentName:"p"},"invariant")," keyword. The ",(0,i.yg)("inlineCode",{parentName:"p"},"with")," keyword introduces\na name for a value of the type being specified:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ocaml",metastring:"{4}","{4}":!0},"type 'a t\n(*@ model capacity: int\n    mutable model contents: 'a Set.t\n    with t invariant Set.cardinal t.contents <= t.capacity *)\n")),(0,i.yg)("p",null,"Note that functions may break these invariants internally, but they must restore\nthem so that they still hold at the function exit."))}m.isMDXComponent=!0}}]);