Todo:
Namespace in gospel:

- Within specifications all variables have logical types

- When using an OCaml variable in a specification, we implicitly lift it to a logical type,
  depending on its corresponding spatial type.

- Assuming a default spatial specificaction:

  - If the OCaml variable is of a type with a model, its logical type will be its model
  - If the OCaml variable is of a duplicable type with no model, then its logical type will be a reflection of its OCaml type with the same name.
  - If the OCaml variable is of a non-duplicable type with no model, then we will have to create a new logical type.

- Duplicable OCaml types cannot be used as arguments for predicates and logical functions.

Spatial type Proposal:

- Use the model type as its spatial type e.g:

  type t
  (*@ mutable model : integer *)

  val f : t -> unit
  (*@ f x
      modifies x : integer @ t
      requires x = 0
      requries x <> 0
   *)


   type e
   (*@ ephemeral *)

   val g : e -> unit
   (*@ g x
       ensures x = old x
   *)

   using both gospel and spatial types in spatial specs?

val ph_eq : 'a -> 'a -> bool
(* b = st_eq x y
    requires unowned 'a
    ensures b <-> x = y
 *)

poster changes: more realistic handler example (producers).


plenary meeting:
- ask about ephemeral
- spatial type changes
- model as default
